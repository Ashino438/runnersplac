<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title>ランニングシューズ比較・おすすめ評価サイト｜最新モデル徹底レビュー</title>
  <meta name="description" content="最新ランニングシューズの性能・価格・用途を徹底比較。実際のユーザー評価やレビュー、総合ランキングも掲載。初心者から上級者まで、自分に合う一足が見つかる。">
  <meta name="keywords" content="ランニングシューズ, ランニングシューズ 比較, ランニングシューズ おすすめ, ランニングシューズ 評価, マラソン シューズ, ジョギング シューズ, 厚底シューズ">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="robots" content="index, follow">
  <meta name="google-site-verification" content="_5czcBL4tvbzQxBywCtZMynFRJHnP9ddVkyZN0i2zsI">

  <!-- OGP -->
  <meta property="og:title" content="ランニングシューズ比較・おすすめ評価サイト｜最新モデル徹底レビュー">
  <meta property="og:description" content="最新ランニングシューズを性能・価格・用途別に徹底比較。ユーザー評価やレビューも充実。初心者〜上級者まで、自分に合うシューズが見つかる。">
  <meta property="og:type" content="website">
  <meta property="og:url" content="https://あなたのドメイン">
  <meta property="og:image" content="https://あなたのドメイン/ogp-image.jpg">
  <meta property="og:site_name" content="ランニングシューズ比較・おすすめ評価サイト">

  <!-- Twitterカード -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="ランニングシューズ比較・おすすめ評価サイト｜最新モデル徹底レビュー">
  <meta name="twitter:description" content="最新ランニングシューズを性能・価格・用途別に徹底比較。ユーザー評価やレビューも充実。初心者〜上級者まで、自分に合うシューズが見つかる。">
  <meta name="twitter:image" content="https://あなたのドメイン/ogp-image.jpg">

  <!-- ファビコン -->
  <link rel="icon" href="/favicon.ico" type="image/x-icon">

  <!-- CSS & JS -->
  <link rel="stylesheet" href="/css/home.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
 
  <div id="nickname-popup" style="display:none; position:fixed; top:30%; left:50%; transform:translate(-50%, -50%); background:#fff; padding:20px; border-radius:8px; box-shadow:0 2px 10px rgba(0,0,0,0.2); z-index:999;">
  <p>ニックネームを設定してください：</p>
  <input type="text" id="nickname-input" placeholder="例：きよし"><br><br>
  <button id="save-nickname">保存</button>
</div>

  <header class="main-header">
    <h1>runnersplac-db</h1>
    <nav>
      <a href="/">ホーム</a>
      <a href="/about">サイトについて</a>
      <a href="https://www.instagram.com/25553runner" >Instagram</a>
      <span id="user-info">
      <button id="login-btn">ログイン</button>
      <span id="user-name" style="display:none;"></span>
      <button id="logout-btn" style="display:none;">ログアウト</button>
    </span>
  </div></a>
    </nav>
  </header>

  <main>
    <section class="intro">
      <p>このサイトは、実際に走るみんなの「リアルな評価」と管理人のレビューを集めて、  
ランニングシューズ選びを“データと感想”で徹底サポートする比較サイトです。  
クッションや安定性、軽さなど各項目のスコアや詳細レビューを一覧でチェックでき、  
自分に合う1足をじっくり選べます。

最終的にはランニング系SNSで最大になれるように頑張っていきます！応援おねがいします！

詳細ボタンよりシューズの細かいレビューコメント機能を使用できます．
</p>
    </section>
    <section class="search-box">
  <input type="text" id="searchInput" placeholder="シューズ名で検索" />
</section>
<button id="toggleFilter" style="margin: 10px 0;">▼ 絞り込み条件を表示</button>

<div class="filter-container">
  

  <!-- 重さ -->

  <label >
    min:
<input type="range" id="weightMin" min="100" max="400" step="5" value="100"><span id="weightMinValue"></span>

  </label>
  <br>
  <label >
    max:
  <input type="range" id="weightMax" min="100" max="400" step="5" value="400"><span id="weightMaxValue"></span>
  </label>
<p id="weightRangeDisplay">重さ: --- g〜 --- g</p>





  <!-- 価格 -->
  
<label>
  最小価格: 
  <input type="range" id="priceMin" min="0" max="40000" step="100" value="0">
  <span id="priceMinValue">5000円</span>
</label>
<br>
<label>
  最大価格: 
  <input type="range" id="priceMax" min="0" max="40000" step="100" value="40000">
  <span id="priceMaxValue">15000円</span>
</label>
<p id="priceRangeDisplay">価格: --- 円〜 --- 円</p>

<label for="dropMin">最小ドロップ（mm）: 
  <input type="range" id="dropMin" min="0" max="20" step="1" value="0">
  <span id="dropMinValue">0mm</span>
</label>

<label for="dropMax">最大ドロップ（mm）: 
  <input type="range" id="dropMax" min="0" max="20" step="1" value="15">
  <span id="dropMaxValue">15mm</span>
</label>


  <!-- 性能スコア -->
  <fieldset>
    <legend>性能スコアの下限（〇点以上）</legend>
    <label>クッション性: <input type="number" id="minCushion" min="0" max="5" step="0.5"></label>
    <label>スピード性能: <input type="number" id="minSpeed" min="0" max="5" step="0.5"></label>
  
  <label>安定性: <input type="number" id="minStability" min="0" max="5" step="0.5"></label>
  <label>コスパ: <input type="number" id="minCost" min="0" max="5" step="0.5"></label>
  <label>耐久性: <input type="number" id="minDurability" min="0" max="5" step="0.5"></label>
    <!-- 必要に応じて追加 -->
  </fieldset>

  <fieldset>
  <legend>ブランドで絞り込み</legend>
  <label><input type="checkbox" class="brandCheckbox" value="nike"> NIKE</label>
  <label><input type="checkbox" class="brandCheckbox" value="asics"> ASICS</label>
  <label><input type="checkbox" class="brandCheckbox" value="hoka"> HOKA</label>
  <label><input type="checkbox" class="brandCheckbox" value="puma"> PUMA</label>
  <label><input type="checkbox" class="brandCheckbox" value="adidas"> ADIDAS</label>
  <label><input type="checkbox" class="brandCheckbox" value="on"> ON</label>
  <label><input type="checkbox" class="brandCheckbox" value="newbalance"> NEW BALANCE</label>
  <label><input type="checkbox" class="brandCheckbox" value="mizuno"> MIZUNO</label>
</fieldset>


  <button id="filterButton">絞り込む</button>

  

</div>
<div id="filterInfo" style="margin-top:10px; font-size:14px; color:#555;"></div>


   
  <table class="shoes-table">
 
 <tbody>
  <% shoes.forEach(function(shoe, i) { %>
     <% let zebraClass = i % 2 === 0 ? "zebra-a" : "zebra-b"; %>
    <!-- シューズ名の行 -->
    <tr class="spacer-row">
        <td colspan="2" class="spacer-row td"></td>
    </tr>
    <tr>
      <td class="name-cell" colspan="2"><strong><%= shoe.name %></strong></td>
      
    </tr>
    <!-- 画像＋スペック -->
    <tr >
      <th class="col-img">画像</th>
      <th class="col-chart" colspan="2">評価チャート</th>
      <th class="col-brand">ブランド</th>
      <th class="col-weight">重さ</th>
      <th class="col-midsole" colspan="2">ミッドソール</th>
      <th class="col-drop">ドロップ</th>
      <th class="col-drop">オフセット</th>
      <th class="col-purpose" colspan="2">用途</th>
      <th class="col-price">値段</th>
      <th class="col-rating">総合評価</th>
    </tr>
    <tr>
  <td class="img-cell" rowspan="3" data-label="画像">
    <img src="<%= shoe.image %>" class="shoe-table-img">
    <div class="img-actions">
      <a href="/shoes/<%= shoe.id %>" class="detail-btn">詳細 ▼</a>
      <a href="<%= shoe.buyUrl %>" target="_blank" class="buy-btn">購入</a>
    </div>
    <div class="comment-anchor" data-shoe-id="<%= shoe.id %>"></div>
  </td>
  <td class="col-chart" rowspan="3" colspan="2" data-label="評価チャート">
    <canvas id="chart-<%= shoe.id %>" width="30" height="30"></canvas>
  </td>
  <td class="col-brand" data-label="ブランド"><%= shoe.brand %></td>
  <td class="col-weight" data-label="重さ"><%= shoe.weight %></td>
  <td class="col-midsole" colspan="2" data-label="ミッドソール"><%= shoe.midsole %></td>
  <td class="col-drop" data-label="ドロップ"><%= shoe.drop %></td>
  <td class="col-offset" data-label="オフセット"><%= shoe.offset %></td>
  <td class="col-purpose" colspan="2" data-label="用途"><%= shoe.purpose %></td>
  <td class="col-price" data-label="値段"><%= shoe.price %></td>
  <td class="col-rating" data-label="総合評価"><%= shoe.rating %></td>
</tr>

<tr>
  <th class="perf-th">クッション</th>
  <th class="perf-th">安定性</th>
  <th class="perf-th">軽さ</th>
  <th class="perf-th">コスパ</th>
  <th class="perf-th">履き心地</th>
  <th class="perf-th">デザイン</th>
  <th class="perf-th">通気性</th>
  <th class="perf-th">スピード</th>
  <th class="perf-th">グリップ</th>
  <th class="perf-th">耐久性</th>
</tr>

<tr class="score-row">
  <td class="perf-td" data-label="クッション"><%= shoe.chartData[0] %></td>
  <td class="perf-td" data-label="安定性"><%= shoe.chartData[1] %></td>
  <td class="perf-td" data-label="軽さ"><%= shoe.chartData[2] %></td>
  <td class="perf-td" data-label="コスパ"><%= shoe.chartData[3] %></td>
  <td class="perf-td" data-label="履き心地"><%= shoe.chartData[4] %></td>
  <td class="perf-td" data-label="デザイン"><%= shoe.chartData[5] %></td>
  <td class="perf-td" data-label="通気性"><%= shoe.chartData[6] %></td>
  <td class="perf-td" data-label="スピード"><%= shoe.chartData[7] %></td>
  <td class="perf-td" data-label="グリップ"><%= shoe.chartData[8] %></td>
  <td class="perf-td" data-label="耐久性"><%= shoe.chartData[9] %></td>
</tr>
<% }) %>

</tbody>
</table>

</main>

<!-- ブログセクション -->
<section class="blog-section">
  <div class="blog-container">
    <h2 class="blog-title">🏃‍♂️ ランナーのためのブログ</h2>
    <p class="blog-description">ランニングギアやトレーニングに関する実体験レビューをお届けします。</p>
    
    <div class="blog-cards">
      <article class="blog-card">
        <div class="blog-card-header">
          <span class="blog-category">GEAR</span>
          <time class="blog-date">2025-09-24</time>
        </div>
        <h3 class="blog-card-title">
          <a href="/blog/oldspice">【ランナー必見】Old Spiceデオドラントで走った後も"爽やかランナー"に</a>
        </h3>
        <p class="blog-card-excerpt">ランニング後の大敵「汗とニオイ」――その不安を丸ごと減らしてくれたのが，アメリカ発のOld Spiceだった．実際に走る生活の中で効いた理由と使い分けをまとめた．</p>
        <div class="blog-card-footer">
          <span class="blog-author">by Kiyoshi Roshiro</span>
          <a href="/blog/oldspice" class="blog-read-more">続きを読む →</a>
        </div>
      </article>
    </div>
  </div>
</section>

<style>
.blog-section {
  background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
  padding: 60px 20px;
  margin-top: 40px;
}

.blog-container {
  max-width: 1200px;
  margin: 0 auto;
}

.blog-title {
  font-size: clamp(24px, 3vw, 32px);
  font-weight: 800;
  text-align: center;
  margin-bottom: 10px;
  color: #2d3748;
}

.blog-description {
  text-align: center;
  color: #718096;
  margin-bottom: 40px;
  font-size: 16px;
}

.blog-cards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  gap: 24px;
  margin-top: 30px;
}

.blog-card {
  background: white;
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05), 0 10px 25px rgba(0, 0, 0, 0.03);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  border: 1px solid #e2e8f0;
}

.blog-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08), 0 15px 35px rgba(0, 0, 0, 0.05);
}

.blog-card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
}

.blog-category {
  background: linear-gradient(135deg, #ff2f6d, #ff6b3d);
  color: white;
  padding: 4px 12px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 700;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.blog-date {
  color: #a0aec0;
  font-size: 14px;
}

.blog-card-title {
  margin: 0 0 12px 0;
  font-size: 18px;
  font-weight: 700;
  line-height: 1.4;
}

.blog-card-title a {
  color: #2d3748;
  text-decoration: none;
  transition: color 0.2s ease;
}

.blog-card-title a:hover {
  color: #ff2f6d;
}

.blog-card-excerpt {
  color: #4a5568;
  line-height: 1.6;
  margin-bottom: 20px;
  font-size: 14px;
}

.blog-card-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-top: 16px;
  border-top: 1px solid #e2e8f0;
}

.blog-author {
  color: #718096;
  font-size: 14px;
}

.blog-read-more {
  color: #ff2f6d;
  text-decoration: none;
  font-weight: 600;
  font-size: 14px;
  transition: color 0.2s ease;
}

.blog-read-more:hover {
  color: #e53e3e;
}

@media (max-width: 768px) {
  .blog-section {
    padding: 40px 16px;
  }
  
  .blog-cards {
    grid-template-columns: 1fr;
    gap: 20px;
  }
  
  .blog-card {
    padding: 20px;
  }
  
  .blog-card-footer {
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
  }
}
</style>




<script>
  window.onload = function () {
    const shoeList = <%- JSON.stringify(shoes) %>;

    // 検索処理
    document.getElementById('searchInput').addEventListener('input', function () {
          
      const keyword = this.value.toLowerCase();
      const rows = document.querySelectorAll('.shoes-table tbody > tr');

      for (let i = 0; i < rows.length; i++) {
        const row = rows[i];
        const nameCell = row.querySelector('.name-cell');

        if (nameCell) {
          const shoeName = nameCell.textContent.toLowerCase();
          const match = shoeName.includes(keyword);

          for (let j = 0; j < 6; j++) {
            const targetRow = rows[i - 1 + j];
            if (targetRow) {
              targetRow.style.display = match ? '' : 'none';
            }
          }
        }
      }
    });

    // 絞り込み処理
 // スライダーラベルの更新
 
function updateSliderLabels() {
  document.getElementById("priceMinValue").textContent =
    document.getElementById("priceMin").value + "円";
  document.getElementById("priceMaxValue").textContent =
    document.getElementById("priceMax").value + "円";
  document.getElementById("weightMinValue").textContent =
    document.getElementById("weightMin").value + "g";
  document.getElementById("weightMaxValue").textContent =
    document.getElementById("weightMax").value + "g";
}
function updateDropLabels() {
  document.getElementById("dropMinValue").textContent =
    document.getElementById("dropMin").value + "mm";
  document.getElementById("dropMaxValue").textContent =
    document.getElementById("dropMax").value + "mm";
}
function updateRangeDisplays() {
  const priceMin = document.getElementById("priceMin").value;
  const priceMax = document.getElementById("priceMax").value;
  const weightMin = document.getElementById("weightMin").value;
  const weightMax = document.getElementById("weightMax").value;

  document.getElementById("priceRangeDisplay").textContent =
    `価格: ${priceMin}円〜${priceMax}円`;
  document.getElementById("weightRangeDisplay").textContent =
    `重さ: ${weightMin}g〜${weightMax}g`;
}

// 初期表示
updateSliderLabels();
updateRangeDisplays();
updateDropLabels();
// スライダー変化で表示更新
["priceMin", "priceMax", "weightMin", "weightMax"].forEach(id => {
  document.getElementById(id).addEventListener("input", () => {
    updateSliderLabels();
    updateRangeDisplays();
  });
});
["dropMin", "dropMax"].forEach(id => {
  document.getElementById(id).addEventListener("input", updateDropLabels);
});

document.getElementById("filterButton").addEventListener("click", () => {
  const filters = {
    weightRange: [
      parseInt(document.getElementById("weightMin").value),
      parseInt(document.getElementById("weightMax").value)
    ],
    priceRange: [
      parseInt(document.getElementById("priceMin").value),
      parseInt(document.getElementById("priceMax").value)
    ],
    minScores: {}
  };
const dropMin = parseInt(document.getElementById("dropMin")?.value);
const dropMax = parseInt(document.getElementById("dropMax")?.value);
filters.dropRange = [isNaN(dropMin) ? 0 : dropMin, isNaN(dropMax) ? 20 : dropMax];

  const getVal = id => parseFloat(document.getElementById(id)?.value);
  const scoreLabels = {
    "クッション性": "minCushion",
    "スピード性能": "minSpeed",
    "安定性": "minStability",
    "コスパ": "minCost",
    "デザイン": "minDesign",
    "耐久性": "minDurability"
  };
  for (const [label, id] of Object.entries(scoreLabels)) {
    const val = getVal(id);
    if (!isNaN(val)) filters.minScores[label] = val;
  }

  // ブランドと厚みの取得
 filters.selectedBrands = Array.from(document.querySelectorAll('.brandCheckbox:checked'))
  .map(cb => cb.value.toLowerCase());

  

  // 表示テキスト
  const infoText = `
    重さ: ${filters.weightRange[0]}〜${filters.weightRange[1]}g，
    価格: ${filters.priceRange[0]}〜${filters.priceRange[1]}円，
    クッション性: ${filters.minScores["クッション性"] ?? "指定なし"}以上，
    スピード性能: ${filters.minScores["スピード性能"] ?? "指定なし"}以上，
    安定性: ${filters.minScores["安定性"] ?? "指定なし"}以上，
    コスパ: ${filters.minScores["コスパ"] ?? "指定なし"}以上，
    デザイン: ${filters.minScores["デザイン"] ?? "指定なし"}以上，
    耐久性: ${filters.minScores["耐久性"] ?? "指定なし"}以上
  `;
  document.getElementById("filterInfo").textContent = infoText;

  filterShoesDom(filters);
});

function filterShoesDom(filters) {
  const rows = Array.from(document.querySelectorAll('.shoes-table tbody > tr'));

  for (let i = 0; i < rows.length; i++) {
    const row = rows[i];
    if (!row.classList.contains('spacer-row')) continue;

    const groupRows = rows.slice(i, i + 6);
    const dataRow = groupRows[5];
    const weightCell = groupRows[3]?.querySelector('.col-weight');
    const priceCell = groupRows[3]?.querySelector('.col-price');
  const brandCell = groupRows[3]?.querySelector('.col-brand') || groupRows[3]?.querySelector('.col-brand');
const brand = brandCell?.textContent?.trim().toLowerCase();
console.log("brand:", brand, "selected:", filters.selectedBrands);
   

    if (!dataRow || !weightCell || !priceCell) continue;

    const weight = parseInt(weightCell.textContent);
    const price = parseInt(priceCell.textContent.replace(/[^\d]/g, ''));
    const tds = dataRow.querySelectorAll('.perf-td');
    const chartData = Array.from(tds).map(td => parseFloat(td.textContent));
   let fore = 0, heel = 0;
const offsetText = groupRows[3]?.querySelector('.col-offset')?.textContent || '';

if (offsetText.includes('/')) {
  const parts = offsetText.split('/').map(part => parseInt(part.trim()) || 0);
  if (parts.length === 2) {
    fore = parts[0];
    heel = parts[1];
  }
}

const drop = Math.abs(heel - fore); 
   const brandOk = filters.selectedBrands.length === 0 || filters.selectedBrands.includes(brand);
    const dropOk = drop >= filters.dropRange[0] && drop <= filters.dropRange[1];
    const meets = brandOk  &&dropOk && checkShoeAgainstFilter(chartData, weight, price, filters);

    groupRows.forEach(tr => {
      tr.style.display = meets ? '' : 'none';
    });

    i += 5;
  }
}

function checkShoeAgainstFilter(chartData, weight, price, filters) {
  const { weightRange, priceRange, minScores } = filters;

  if (weight < weightRange[0] || weight > weightRange[1]) return false;
  if (price < priceRange[0] || price > priceRange[1]) return false;

  const indexMap = {
    "クッション性": 0,
    "安定性": 1,
    "軽さ": 2,
    "コスパ": 3,
    "履き心地": 4,
    "デザイン": 5,
    "通気性": 6,
    "スピード性能": 7,
    "グリップ": 8,
    "耐久性": 9
  };

  return Object.entries(minScores).every(([label, min]) => {
    const idx = indexMap[label];
    return idx === undefined || chartData[idx] >= min;
  });
}

    // チャート描画
    const charts = {};
    <% shoes.forEach(function(shoe) { %>
      var ctxId = 'chart-<%= shoe.id %>';
      var ctx = document.getElementById(ctxId);

      console.log("canvas ID:", ctxId);
      console.log("canvas:", ctx);
      console.log("chartData:", <%- JSON.stringify(shoe.chartData) %>);

      if (ctx) {
        if (charts[ctxId]) {
          charts[ctxId].destroy();
        }

        charts[ctxId] = new Chart(ctx, {
          type: 'radar',
          data: {
            labels: ['ク', '安', '軽', 'コ', '履', 'デ', '通', '速', 'グ', '耐'],
            datasets: [{
              label: '評価',
              data: <%- JSON.stringify(shoe.chartData) %>,
              fill: true,
              borderWidth: 1,
              pointRadius: 1
            }]
          },
          options: {
            scales: {
              r: {
                pointLabels: { font: { size: 9 } },
                ticks: { display: false },
                min: 0,
                max: 5
              }
            },
            plugins: {
              legend: { display: false }
            },
            elements: {
              line: { borderWidth: 2 }
            }
          }
        });
      } else {
        console.warn("canvasが見つからない:", ctxId);
      }
    <% }); %>

    // 初期表示
    renderShoeList(shoeList);

    function renderShoeList(shoes) {
      const container = document.getElementById("shoeList");
      if (!container) return;
      container.innerHTML = "";

      if (shoes.length === 0) {
        container.innerHTML = "<p>該当するシューズが見つかりませんでした。</p>";
        return;
      }

      shoes.forEach(shoe => {
        const div = document.createElement("div");
        div.className = "shoe-item";
        div.textContent = `✅ ${shoe.name}（${shoe.weight}g / ¥${shoe.price}）`;
        container.appendChild(div);
      });
    }

    function filterShoes(shoes, filters) {
      return shoes.filter(shoe => {
        const { weightRange, priceRange, minScores } = filters;
        const inWeight = shoe.weight >= weightRange[0] && shoe.weight <= weightRange[1];
        const inPrice = shoe.price >= priceRange[0] && shoe.price <= priceRange[1];

        const meetsScores = Object.entries(minScores).every(([key, min]) => {
          const index = getScoreIndex(key);
          return shoe.chartData[index] >= min;
        });

        return inWeight && inPrice && meetsScores;
      });
    }

    function getScoreIndex(label) {
      const labels = ["クッション性", "安定性", "軽さ", "コスパ", "履き心地", "デザイン", "通気性", "スピード性能", "グリップ", "耐久性"];
      return labels.indexOf(label);
    }
  };
  const toggleBtn = document.getElementById("toggleFilter");
  const filterBox = document.querySelector(".filter-container");

  toggleBtn.addEventListener("click", () => {
    filterBox.classList.toggle("open");
    toggleBtn.textContent = filterBox.classList.contains("open")
      ? "▲ 絞り込み条件を隠す"
      : "▼ 絞り込み条件を表示";
  });


</script>
<script type="module">
  import { getAuth, GoogleAuthProvider, signInWithPopup, signOut, onAuthStateChanged } from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js';
  import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js';

  const firebaseConfig = {
    apiKey: "AIzaSyBbFaRwIiYw61X5yKXhvt1nGw-MRSgagLo",
    authDomain: "mystlide.firebaseapp.com",
    databaseURL: "https://mystlide-default-rtdb.firebaseio.com",
    projectId: "mystlide",
    storageBucket: "mystlide.firebasestorage.app",
    messagingSenderId: "823773802251",
    appId: "1:823773802251:web:823d531f428f02f463fc0e",
    measurementId: "G-E2V49FQSMX"
  };

  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);
  const provider = new GoogleAuthProvider();

  document.addEventListener("DOMContentLoaded", () => {
    const loginBtn = document.getElementById("login-btn");
    const logoutBtn = document.getElementById("logout-btn");
    const userName = document.getElementById("user-name");
    let isLoggingIn = false;

    loginBtn?.addEventListener("click", async () => {
      if (isLoggingIn) return;
      isLoggingIn = true;

      try {
        await signInWithPopup(auth, provider);
      } catch (err) {
        alert("ログイン失敗：" + err.message);
        console.error(err);
      } finally {
        isLoggingIn = false;
      }
    });

    logoutBtn?.addEventListener("click", () => {
      signOut(auth);
    });

    onAuthStateChanged(auth, (user) => {
      if (user) {
        loginBtn.style.display = "none";
        logoutBtn.style.display = "inline";
        userName.style.display = "inline";
        userName.textContent = `${user.displayName} さん`;
      } else {
        loginBtn.style.display = "inline";
        logoutBtn.style.display = "none";
        userName.style.display = "none";
      }
    });
  });
</script>

 <script src="/js/comment.js"></script> 
</body>
</html>

