<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <title><%= shoe.name %>｜ランニングシューズ詳細</title>

  <meta name="description" content="<%= shoe.name %> の詳細レビュー。クッション性・グリップ・耐久性を徹底比較。市民ランナーや初心者にもおすすめ。">
  <meta name="keywords" content="ランニングシューズ,<%= shoe.brand %>,<%= shoe.name %>,レビュー,マラソン,ジョギング,クッション,安定性,初心者,評価">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="canonical" href="https://runnersplac.onrender.com/shoes/<%= shoe.id %>">
  <meta property="og:url" content="https://runnersplac.onrender.com/shoes/<%= shoe.id %>">
  
  <meta property="og:title" content="<%= shoe.name %>｜ランニングシューズ徹底レビュー">
  <meta property="og:description" content="クッション性と安定性に優れた<%= shoe.name %>を徹底解説。実際のユーザー評価付き。">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://runnersplac.onrender.com/images/<%= shoe.image %>">
  <meta name="twitter:card" content="summary_large_image">

  <link rel="preload" href="/css/detail.css" as="style">
  <link rel="stylesheet" href="/css/detail.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

  <script type="application/ld+json">
  {
    "@context":"https://schema.org",
    "@type":"Product",
    "name":"<%= shoe.name %>",
    "image":"https://runnersplac.onrender.com/images/<%= shoe.image %>",
    "description":"<%= shoe.name %> の詳細レビュー。クッション性・グリップ・耐久性などを解説。",
    "brand":{"@type":"Brand","name":"<%= shoe.brand %>"},
    "sku":"<%= shoe.id %>",
    "offers":{
      "@type":"Offer",
      "price":"<%= shoe.price %>",
      "priceCurrency":"JPY",
      "url":"https://runnersplac.onrender.com/<%= shoe.id %>",
      "availability":"https://schema.org/InStock"
    }<% if (typeof communityAvg === 'number') { %>,
    "aggregateRating":{
      "@type":"AggregateRating",
      "ratingValue":"<%= communityAvg.toFixed(1) %>",
      "reviewCount":"<%= communityCount || 0 %>"
    }<% } %>
  }
  </script>
</head>
<body data-is-admin="<%= (user && user.isAdmin) ? '1' : '' %>">

  <header class="header">
    <a href="/home" class="logo">Runnersplac</a>
    <nav class="nav">
      <a href="/home">Home</a>
      <a href="https://www.instagram.com/25553runner" target="_blank" rel="noopener noreferrer" aria-label="Instagram">
        <i class="fab fa-instagram"></i>
      </a>
      <button id="login-btn">ログイン</button>
      <span id="user-name" style="display:none;"></span>
      <button id="logout-btn" style="display:none;">ログアウト</button>
    </nav>
  </header>

  <main class="detail">
    <section class="hero">
      <div class="hero-text">
        <h1><%= shoe.name %></h1>
        <p class="sub"><%= shoe.brand %> ｜ 重量 <%= shoe.weight %>g ／ オフセット <%= shoe.offset %> ／ ミッドソール <%= shoe.midsole %></p>
        <p class="price">価格：<span><%= shoe.price.toLocaleString() %></span> 円</p>
        <% if (shoe.buyUrl) { %>
          <a class="buy-btn" href="<%= shoe.buyUrl %>" target="_blank" rel="noopener noreferrer">購入ページへ</a>
        <% } %>
      </div>
    
      <figure class="hero-img">
        <img
          src="<%= shoe.image %>"
          alt="<%= shoe.brand %> <%= shoe.name %> の商品画像"
          loading="eager" fetchpriority="high">
      </figure>
    </section>
    
    <!-- ホスト本文（ブログ） -->
    
    <section class="host-article card">
      <h2>
        ホストレビュー
        <% if (user && user.isAdmin) { %>
          <a href="/admin/articles/<%= shoe.slug || shoe.id %>" class="badge" style="margin-left:.6rem">編集</a>
        <% } %>
      </h2>
    
      <% if (shoe.articleHtml) { %>
        <article class="prose"><%- shoe.articleHtml %></article>
      <% } else { %>
        <% if (user && user.isAdmin) { %>
          <p class="muted">まだ記事がありません．
            <a href="/admin/articles/<%= shoe.slug || shoe.id %>">新規作成</a>
          </p>
        <% } %>
      <% } %>
    </section>
     <section id="memo-root"
  class="card"
  data-shoe-id="<%= shoe.slug || shoe.id %>"
  data-name='<%- JSON.stringify(shoe.name) %>'
  data-chart='<%- JSON.stringify(shoe.chartData) %>'>
</section>
  
    

    <section class="charts">
      <div class="card">
        <h2>ホスト評価（レーダー）</h2>
        <div class="chart-wrap">
          <canvas id="chart" width="380" height="380" aria-label="性能レーダーチャート" role="img"></canvas>
        </div>
      </div>
      <div class="card">
        <h2>みんなの平均評価</h2>
        <div id="avgWrap" class="chart-wrap">
          <canvas id="avgChart" width="380" height="380" aria-label="みんなの平均レーダー" role="img"></canvas>
        </div>
      </div>
    </section>

    <section class="host-table card">
      <h2>ホストによる評価</h2>
      <table class="host-eval-table">
        <thead>
          <tr>
            <th>項目</th>
            <th>スコア</th>
            <th>コメント</th>
          </tr>
        </thead>
        <tbody>
          <%
            const labels = ['クッション性','安定性','軽さ','コスパ','履き心地','デザイン','通気性','スピード性能','グリップ','耐久性'];
            for (let i = 0; i < 10; i++) {
              const label = labels[i];
              const score = shoe.chartData[i];
          %>
            <tr>
              <td><%= label %></td>
              <td class="stars">
                <% for (let s = 1; s <= 5; s++) { %>
                  <% if (score >= s) { %>
                    <span class="star full">★</span>
                  <% } else if (score >= s - 0.5) { %>
                    <span class="star half">★</span>
                  <% } else { %>
                    <span class="star empty">☆</span>
                  <% } %>
                <% } %>
                <span class="num"><%= score.toFixed ? score.toFixed(1) : score %></span>
              </td>
              <td class="hostComment"><%= shoe.hostComment ? shoe.hostComment[label] : 'コメントなし' %></td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </section>

    <section class="comments card" data-shoe-id="<%= shoe.id %>">
      <h2>レビュー投稿</h2>

      <!-- 項目別 1..5 の投票UI（サイトの強みを継続） -->
      <form id="comment-form">
        <label for="nickname">ニックネーム（任意）</label>
        <input id="nickname" name="nickname" type="text" maxlength="50" placeholder="例：きよし">

        <label for="userComment">レビュー本文</label>
        <textarea id="userComment" name="comment" rows="6" placeholder="使用距離／路面／サイズ感／走ったペースなど自由にどうぞ"></textarea>

      <!-- 評価フォーム内の星パートを置き換え -->
<div class="ratings-grid">
  <% labels.forEach((label, idx) => { %>
    <div class="rating-row">
      <span class="rating-label"><%= label %></span>
      <div class="rating-stars" data-index="<%= idx %>">
        <% for (let s = 5; s >= 1; s--) { %>
          <input type="radio" id="r-<%= idx %>-<%= s %>" name="rating-<%= idx %>" value="<%= s %>">
          <label for="r-<%= idx %>-<%= s %>" aria-label="<%= s %>">★</label>
        <% } %>
      </div>
    </div>
  <% }) %>
</div>


        <button type="submit" class="submit-btn">投稿する</button>
      </form>

      <h3 class="list-title">みんなのレビュー</h3>
      <ul id="posted-comments" class="comment-list"></ul>
      <button id="more-btn" class="more-btn" style="display:none;">もっと見る</button>
    </section>
  </main>

  <footer class="footer">
    <a href="/home">Home</a>
    <% if (shoe.buyUrl) { %>
      <a href="<%= shoe.buyUrl %>" class="buy-btn outline" target="_blank" rel="noopener noreferrer">購入</a>
    <% } %>
  </footer>

  <script src="https://cdn.jsdelivr.net/npm/chart.js" defer></script>
<script>
  // ここは "module" じゃない普通の <script> で
  window.__SHOE__ = {
    id: <%- JSON.stringify(shoe.id) %>,
    slug: <%- JSON.stringify(shoe.slug || "") %>,
    name: <%- JSON.stringify(shoe.name) %>,
    chartData: <%- JSON.stringify(shoe.chartData) %>
  };

  // まずPENDINGにしておく（ここまで来れば console で見ても undefined にはならない）
  window.__TAB_MODE__ = 'PENDING';
  console.log('[loader] alive, __SHOE__=', window.__SHOE__);

  (async () => {
    // slug → id の順で JSON を探す（どっちで置いても動く）
    const keys = [window.__SHOE__.slug, String(window.__SHOE__.id)].filter(Boolean);
    let ok = false;
    for (const k of keys) {
      try {
        const res = await fetch(`/memos/${encodeURIComponent(k)}.json`, { cache: 'no-store' });
        console.log('[memos]', k, res.status);
        if (res.ok) { window.__MEMO__ = await res.json(); ok = true; break; }
      } catch (e) { console.error(e); }
    }
    window.__TAB_MODE__ = ok;
    document.dispatchEvent(new Event('tabmode:decided'));
    if (ok) {
      const s = document.createElement('script');
      s.src = "/js/tabbed-ui.js";
      s.onload = ()=>console.log('[tabbed] loaded');
      s.onerror = (e)=>console.error('[tabbed] load failed', e);
      document.head.appendChild(s);
    } else {
      console.log('[tabbed] legacy mode');
    }
  })();
</script>


  <!-- Firebase Auth（ログインUIだけ利用） -->


  <script type="module">
  import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js';
  import {
    getAuth, GoogleAuthProvider, signInWithPopup, signInWithRedirect,
    signOut, onAuthStateChanged, getIdToken
  } from 'https://www.gstatic.com/firebasejs/9.22.2/firebase-auth.js';

  const firebaseConfig = {  apiKey: "AIzaSyBbFaRwIiYw61X5yKXhvt1nGw-MRSgagLo",
      authDomain: "mystlide.firebaseapp.com",
      projectId: "mystlide",
      appId: "1:823773802251:web:823d531f428f02f463fc0e" };
  const app = initializeApp(firebaseConfig);
  const auth = getAuth(app);
  const provider = new GoogleAuthProvider();

  const loginBtn  = document.getElementById("login-btn");
  const logoutBtn = document.getElementById("logout-btn");
  const userName  = document.getElementById("user-name");

   async function sessionLogin(user){
    const idToken = await getIdToken(user, true);
    await fetch('/sessionLogin', {
      method:'POST',
      headers:{ 'Content-Type':'application/json' },
      credentials:'include'
    ,  body: JSON.stringify({ idToken })
    });
    // ★ 一度セッション確立を試した印を付けてからリロード
    sessionStorage.setItem('ssr:login-tried', '1');
    location.reload();
  }

  async function sessionLogout(){
    await fetch('/sessionLogout', { method:'POST', credentials:'include' });
    sessionStorage.removeItem('ssr:login-tried');
  }

  const SSR_LOGGED_IN = document.body.dataset.loggedIn === '1';

  onAuthStateChanged(auth, async (user) => {
    if (user) {
      loginBtn.style.display = "none";
      logoutBtn.style.display = "inline-block";
      userName.style.display = "inline-block";
      userName.textContent = `${user.displayName} さん`;

      const tried = sessionStorage.getItem('ssr:login-tried') === '1';
      // ★ SSRが未ログインで、まだ一度も橋渡ししてなければだけ実行
      if (!SSR_LOGGED_IN && !tried) {
        await sessionLogin(user);
      }
    } else {
      loginBtn.style.display = "inline-block";
      logoutBtn.style.display = "none";
      userName.style.display = "none";
      await sessionLogout();
    }
  });

  logoutBtn?.addEventListener("click", async () => {
    await signOut(auth);
    await sessionLogout();
    location.reload();
  });
</script>


  <!-- コメント＆平均読み込み -->
  <script>
    const shoeId = "<%= shoe.id %>";
    const labels = ['クッション','安定性','軽さ','コスパ','履き心地','デザイン','通気性','スピード','グリップ','耐久性'];

    // レーダー（ホスト）
      function startLegacy(){  // ← ここに今までの初期化を移動
    const makeRadar = (el, data, label) => {
      if (!el || !window.Chart) return;
      return new Chart(el, {
        type: 'radar',
        data: { labels, datasets: [{ label, data, pointRadius: 2, fill: true }] },
        options: {
          maintainAspectRatio: false, responsive: true,
          plugins: { legend: { display: false } },
          scales: { r: { min: 0, max: 5, ticks: { stepSize: 1, backdropColor: 'transparent' } } }
        }
      });
    };
    makeRadar(document.getElementById('chart'), <%= JSON.stringify(shoe.chartData) %>, '<%= shoe.name %>');
    loadComments(); // 初回ロード
  }

  window.addEventListener('DOMContentLoaded', () => {
    if (window.__TAB_MODE__ === 'PENDING') {
      document.addEventListener('tabmode:decided', () => {
        if (!window.__TAB_MODE__) startLegacy();
      }, { once: true });
    } else {
      if (!window.__TAB_MODE__) startLegacy();
    }
  });

    let nextCursor = null;
    async function loadComments(append = false) {
      const url = new URL(`/api/comments/${shoeId}`, window.location.origin);
      url.searchParams.set('limit', '10');
      if (nextCursor) url.searchParams.set('cursor', nextCursor);
      const res = await fetch(url);
      if (!res.ok) return;

      const { comments, avgRatings, count, nextCursor: nc } = await res.json();
      renderAvg(avgRatings, count);
      renderComments(comments, append);
      nextCursor = nc;
      document.getElementById('more-btn').style.display = nextCursor ? 'inline-block' : 'none';
    }

    function renderAvg(avgRatings, count) {
      const wrap = document.getElementById('avgWrap');
      if (!wrap) return;
      let canvas = document.getElementById('avgChart');
      if (!avgRatings || !avgRatings.some(v => v > 0)) {
        wrap.innerHTML = '<p class="muted">まだ評価がありません</p>';
        return;
      }
      // 再描画対策
      wrap.innerHTML = '<canvas id="avgChart" width="380" height="380"></canvas>';
      new Chart(document.getElementById('avgChart'), {
        type: 'radar',
        data: {
          labels,
          datasets: [{ label: `みんなの平均（n=${count}）`, data: avgRatings, pointRadius: 2, fill: true }]
        },
        options: {
          maintainAspectRatio: false, responsive: true,
          plugins: { legend: { display: false } },
          scales: { r: { min: 0, max: 5, ticks: { stepSize: 1, backdropColor: 'transparent' } } }
        }
      });
    }

    function renderComments(list, append) {
      const ul = document.getElementById('posted-comments');
      if (!ul) return;
      if (!append) ul.innerHTML = '';
      list.forEach((d) => {
        const li = document.createElement('li');
        const when = d.createdAt ? new Date(d.createdAt).toLocaleString() : '';
        const stars = (Array.isArray(d.ratings) ? d.ratings : []).map(v => `★`.repeat(v) + `☆`.repeat(5-v)).join(' / ');
        li.innerHTML = `
          <article class="review">
            <header>
              <span class="nick">${(d.nickname||'匿名')}</span>
              <time datetime="${d.createdAt||''}">${when}</time>
            </header>
            <p class="body">${escapeHtml(d.comment || '')}</p>
            <p class="mini-stars">${stars}</p>
          </article>`;
        ul.appendChild(li);
      });
    }

    document.getElementById('more-btn')?.addEventListener('click', () => loadComments(true));

    // 投稿
  // 送信処理の直前にバリデーション追加
  /*document.getElementById('comment-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const ratings = [];
    for (let i = 0; i < 10; i++) {
      const v = Number((document.querySelector(`input[name="rating-${i}"]:checked`)||{}).value || 0);
      ratings.push(v);
    }
    if (ratings.some(v => v < 1 || v > 5)) {
      alert('各項目の★を1〜5で選んでから投稿してね！');
      return;
    }
    const nickname = document.getElementById('nickname').value.trim();
    const comment = document.getElementById('userComment').value.trim();
    const payload = { shoeId: "<%= shoe.id %>", comment, ratings, nickname };

    const res = await fetch('/api/comments', {
      method: 'POST',
      headers: { 'Content-Type':'application/json' },
      body: JSON.stringify(payload)
    });
    if (!res.ok) {
      const j = await res.json().catch(()=>({}));
      alert('投稿失敗：' + (j.error || 'サーバエラー'));
      return;
    }
    // 成功処理…
  });*/
function esc(s){return String(s??'').replace(/[&<>\"']/g,c=>({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;'}[c]));}
function avg(arr){if(!arr?.length) return 0; return Math.round((arr.reduce((p,c)=>p+Number(c||0),0)/arr.length)*10)/10;}
function starsHTML(v){const n=Math.max(0,Math.min(5,Math.round(v))); return '★'.repeat(n)+'☆'.repeat(5-n);}
// トースト
function showToast(msg, ok=true){
  let t=document.getElementById('toast');
  if(!t){
    t=document.createElement('div');
    t.id='toast';
    t.style.cssText='position:fixed;left:50%;transform:translateX(-50%);bottom:24px;padding:10px 14px;border-radius:12px;color:#fff;background:#16a34a;box-shadow:0 6px 20px rgba(0,0,0,.15);z-index:9999;max-width:90%;';
    document.body.appendChild(t);
  }
  t.style.background = ok ? '#16a34a' : '#dc2626';
  t.textContent = msg;
  t.style.opacity='1';
  setTimeout(()=>{t.style.transition='opacity .4s'; t.style.opacity='0';}, 2000);
}
// コメントDOM追加（#comments-list or .comment-list を想定）

// テーマCSSを一度だけ注入
function ensureCommentTheme(){
  if (document.getElementById('comment-theme')) return;
  const style = document.createElement('style');
  style.id = 'comment-theme';
  style.textContent = `
    :root{
      --c-card-bg:#ffffff;
      --c-text:#111827;      /* 高コントラスト本文 */
      --c-sub:#374151;       /* 補助テキスト（濃いめ） */
      --c-border:#e5e7eb;
    }
    .dark, [data-theme="dark"]{
      --c-card-bg:#0b1220;
      --c-text:#e5e7eb;
      --c-sub:#9ca3af;
      --c-border:#374151;
    }
    .comment-item{
      background:var(--c-card-bg);
      color:var(--c-text);
      border:1px solid var(--c-border);
      border-radius:12px;
      padding:12px 14px;
      margin:10px 0;
    }
    .comment-item .meta{
      display:flex;justify-content:space-between;gap:8px;align-items:center;margin-bottom:6px;
    }
    .comment-item .sub{ color:var(--c-sub); }
    .comment-item p{ white-space:pre-wrap;line-height:1.7;margin:0; }
    .comment-item .time{ font-size:12px;margin-top:6px; }
  `;
  document.head.appendChild(style);
}

// 既存のesc/avg/starsHTMLはそのまま使ってOK
function appendComment({nickname, comment, ratings, createdAt}){
  ensureCommentTheme();
  const host = document.getElementById('comments-list') || document.querySelector('.comment-list');
  if(!host) return;

  const node = document.createElement('div');
  node.className = 'comment-item';
  const mean = avg(ratings);

  node.innerHTML = `
    <div class="meta">
      <strong>${esc(nickname||'名無し')}</strong>
      <span title="${mean}">${starsHTML(mean)} <small class="sub">(${mean.toFixed(1)})</small></span>
    </div>
    <p>${esc(comment)}</p>
    <div class="sub time">${new Date(createdAt||Date.now()).toLocaleString()}</div>
  `;
  host.prepend(node);
}



const form = document.getElementById('comment-form');
form?.addEventListener('submit', async (e) => {
  e.preventDefault();

  const ratings = [];
  for (let i = 0; i < 10; i++) {
    const v = Number((document.querySelector(`input[name="rating-${i}"]:checked`)||{}).value || 0);
    ratings.push(v);
  }
  if (ratings.some(v => v < 1 || v > 5)) {
    alert('各項目の★を1〜5で選んでから投稿してね！');
    return;
  }
  const nickname = document.getElementById('nickname').value.trim();
  const comment  = document.getElementById('userComment').value.trim();
  if (!comment) { alert('コメントを書いてね！'); return; }

  const btn = form.querySelector('button[type="submit"]') || form.querySelector('button');
  const orig = btn?.textContent;
  btn && (btn.disabled = true, btn.textContent = '投稿中…');

  const payload = { shoeId: "<%= shoe.id %>", comment, ratings, nickname };

  try{
    const res = await fetch('/api/comments', {
      method: 'POST',
      headers: { 'Content-Type':'application/json' },
      body: JSON.stringify(payload)
    });

    if (!res.ok) {
      const j = await res.json().catch(()=>({}));
      showToast('投稿に失敗したよ…もう一度試してみて！', false);
      throw new Error(j.error || `HTTP ${res.status}`);
    }

    // APIが作成データを返す前提で拾う（なければローカル値で補完）
    const j = await res.json().catch(()=>({}));
    const created = j?.comment || { nickname, comment, ratings, createdAt: Date.now() };

    // 画面反映
    appendComment(created);

    // フォームリセット
    form.reset();

    // 成功トースト
    showToast('投稿ありがとう！公開されたよ。', true);

    // 新しいコメントまでスクロール（任意）
    // document.querySelector('.comment-item')?.scrollIntoView({behavior:'smooth', block:'start'});

  }catch(err){
    console.warn('[comment post] failed:', err);
    alert('投稿失敗：' + (err?.message || 'サーバエラー'));
  }finally{
    btn && (btn.disabled = false, btn.textContent = orig || '投稿');
  }
});

    // xss軽減
    function escapeHtml(str){
      return str.replace(/[&<>"']/g, s => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#039;'}[s]));
    }
  </script>


</body>
</html>